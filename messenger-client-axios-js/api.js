"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * 消息推送服务
 * 提供消息推送、消息持久化、消息检索等存储服务。
 *
 * The version of the OpenAPI document: v1
 * Contact: hansin@dustlight.cn
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TemplatesApi = exports.TemplatesApiFactory = exports.TemplatesApiFp = exports.TemplatesApiAxiosParamCreator = exports.NotificationsApi = exports.NotificationsApiFactory = exports.NotificationsApiFp = exports.NotificationsApiAxiosParamCreator = exports.MessagesApi = exports.MessagesApiFactory = exports.MessagesApiFp = exports.MessagesApiAxiosParamCreator = exports.ChannelsApi = exports.ChannelsApiFactory = exports.ChannelsApiFp = exports.ChannelsApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("./common");
// @ts-ignore
const base_1 = require("./base");
/**
 * ChannelsApi - axios parameter creator
 * @export
 */
const ChannelsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary 创建频道
         * @param {BasicChannel} basicChannel
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChannel: (basicChannel, cid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'basicChannel' is not null or undefined
            (0, common_1.assertParamExists)('createChannel', 'basicChannel', basicChannel);
            const localVarPath = `/v1/channels`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "auth", [], configuration);
            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(basicChannel, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary 根据 ID 删除频道
         * @param {string} id
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteChannel: (id, cid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('deleteChannel', 'id', id);
            const localVarPath = `/v1/channels/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "auth", [], configuration);
            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary 查找频道
         * @param {string} [key]
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findChannels: (key, page, size, cid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/channels`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "auth", [], configuration);
            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }
            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary 根据 ID 获取频道
         * @param {string} id
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannel: (id, cid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('getChannel', 'id', id);
            const localVarPath = `/v1/channels/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "auth", [], configuration);
            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary 更新频道
         * @param {string} id
         * @param {BasicChannel} basicChannel
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateChannel: (id, basicChannel, cid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('updateChannel', 'id', id);
            // verify required parameter 'basicChannel' is not null or undefined
            (0, common_1.assertParamExists)('updateChannel', 'basicChannel', basicChannel);
            const localVarPath = `/v1/channels/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "auth", [], configuration);
            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(basicChannel, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.ChannelsApiAxiosParamCreator = ChannelsApiAxiosParamCreator;
/**
 * ChannelsApi - functional programming interface
 * @export
 */
const ChannelsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.ChannelsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary 创建频道
         * @param {BasicChannel} basicChannel
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChannel(basicChannel, cid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createChannel(basicChannel, cid, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary 根据 ID 删除频道
         * @param {string} id
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteChannel(id, cid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteChannel(id, cid, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary 查找频道
         * @param {string} [key]
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findChannels(key, page, size, cid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.findChannels(key, page, size, cid, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary 根据 ID 获取频道
         * @param {string} id
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannel(id, cid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getChannel(id, cid, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary 更新频道
         * @param {string} id
         * @param {BasicChannel} basicChannel
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateChannel(id, basicChannel, cid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateChannel(id, basicChannel, cid, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.ChannelsApiFp = ChannelsApiFp;
/**
 * ChannelsApi - factory interface
 * @export
 */
const ChannelsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.ChannelsApiFp)(configuration);
    return {
        /**
         *
         * @summary 创建频道
         * @param {BasicChannel} basicChannel
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChannel(basicChannel, cid, options) {
            return localVarFp.createChannel(basicChannel, cid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 根据 ID 删除频道
         * @param {string} id
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteChannel(id, cid, options) {
            return localVarFp.deleteChannel(id, cid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 查找频道
         * @param {string} [key]
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findChannels(key, page, size, cid, options) {
            return localVarFp.findChannels(key, page, size, cid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 根据 ID 获取频道
         * @param {string} id
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannel(id, cid, options) {
            return localVarFp.getChannel(id, cid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 更新频道
         * @param {string} id
         * @param {BasicChannel} basicChannel
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateChannel(id, basicChannel, cid, options) {
            return localVarFp.updateChannel(id, basicChannel, cid, options).then((request) => request(axios, basePath));
        },
    };
};
exports.ChannelsApiFactory = ChannelsApiFactory;
/**
 * ChannelsApi - object-oriented interface
 * @export
 * @class ChannelsApi
 * @extends {BaseAPI}
 */
class ChannelsApi extends base_1.BaseAPI {
    /**
     *
     * @summary 创建频道
     * @param {BasicChannel} basicChannel
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelsApi
     */
    createChannel(basicChannel, cid, options) {
        return (0, exports.ChannelsApiFp)(this.configuration).createChannel(basicChannel, cid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 根据 ID 删除频道
     * @param {string} id
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelsApi
     */
    deleteChannel(id, cid, options) {
        return (0, exports.ChannelsApiFp)(this.configuration).deleteChannel(id, cid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 查找频道
     * @param {string} [key]
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelsApi
     */
    findChannels(key, page, size, cid, options) {
        return (0, exports.ChannelsApiFp)(this.configuration).findChannels(key, page, size, cid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 根据 ID 获取频道
     * @param {string} id
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelsApi
     */
    getChannel(id, cid, options) {
        return (0, exports.ChannelsApiFp)(this.configuration).getChannel(id, cid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 更新频道
     * @param {string} id
     * @param {BasicChannel} basicChannel
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelsApi
     */
    updateChannel(id, basicChannel, cid, options) {
        return (0, exports.ChannelsApiFp)(this.configuration).updateChannel(id, basicChannel, cid, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ChannelsApi = ChannelsApi;
/**
 * MessagesApi - axios parameter creator
 * @export
 */
const MessagesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * 获取与目标的对话
         * @summary 获取消息列表
         * @param {string} target
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChat: (target, page, size, cid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'target' is not null or undefined
            (0, common_1.assertParamExists)('getChat', 'target', target);
            const localVarPath = `/v1/chat/{target}`
                .replace(`{${"target"}}`, encodeURIComponent(String(target)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "auth", [], configuration);
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }
            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 以发信者 ID 分组的最新消息列表
         * @summary 获取最新消息列表
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChatList: (page, size, cid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/chat-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "auth", [], configuration);
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }
            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary 标记消息为已读
         * @param {Array<string>} requestBody
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markRead: (requestBody, cid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'requestBody' is not null or undefined
            (0, common_1.assertParamExists)('markRead', 'requestBody', requestBody);
            const localVarPath = `/v1/messages/read`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "auth", [], configuration);
            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(requestBody, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 如果提供了 channel 则发送给频道内所有人
         * @summary 创建并发送消息
         * @param {BasicMessage} basicMessage
         * @param {string} [channel]
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendMessage: (basicMessage, channel, cid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'basicMessage' is not null or undefined
            (0, common_1.assertParamExists)('sendMessage', 'basicMessage', basicMessage);
            const localVarPath = `/v1/messages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "auth", [], configuration);
            if (channel !== undefined) {
                localVarQueryParameter['channel'] = channel;
            }
            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(basicMessage, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.MessagesApiAxiosParamCreator = MessagesApiAxiosParamCreator;
/**
 * MessagesApi - functional programming interface
 * @export
 */
const MessagesApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.MessagesApiAxiosParamCreator)(configuration);
    return {
        /**
         * 获取与目标的对话
         * @summary 获取消息列表
         * @param {string} target
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChat(target, page, size, cid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getChat(target, page, size, cid, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 以发信者 ID 分组的最新消息列表
         * @summary 获取最新消息列表
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChatList(page, size, cid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getChatList(page, size, cid, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary 标记消息为已读
         * @param {Array<string>} requestBody
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markRead(requestBody, cid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.markRead(requestBody, cid, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 如果提供了 channel 则发送给频道内所有人
         * @summary 创建并发送消息
         * @param {BasicMessage} basicMessage
         * @param {string} [channel]
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendMessage(basicMessage, channel, cid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.sendMessage(basicMessage, channel, cid, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.MessagesApiFp = MessagesApiFp;
/**
 * MessagesApi - factory interface
 * @export
 */
const MessagesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.MessagesApiFp)(configuration);
    return {
        /**
         * 获取与目标的对话
         * @summary 获取消息列表
         * @param {string} target
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChat(target, page, size, cid, options) {
            return localVarFp.getChat(target, page, size, cid, options).then((request) => request(axios, basePath));
        },
        /**
         * 以发信者 ID 分组的最新消息列表
         * @summary 获取最新消息列表
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChatList(page, size, cid, options) {
            return localVarFp.getChatList(page, size, cid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 标记消息为已读
         * @param {Array<string>} requestBody
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markRead(requestBody, cid, options) {
            return localVarFp.markRead(requestBody, cid, options).then((request) => request(axios, basePath));
        },
        /**
         * 如果提供了 channel 则发送给频道内所有人
         * @summary 创建并发送消息
         * @param {BasicMessage} basicMessage
         * @param {string} [channel]
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendMessage(basicMessage, channel, cid, options) {
            return localVarFp.sendMessage(basicMessage, channel, cid, options).then((request) => request(axios, basePath));
        },
    };
};
exports.MessagesApiFactory = MessagesApiFactory;
/**
 * MessagesApi - object-oriented interface
 * @export
 * @class MessagesApi
 * @extends {BaseAPI}
 */
class MessagesApi extends base_1.BaseAPI {
    /**
     * 获取与目标的对话
     * @summary 获取消息列表
     * @param {string} target
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagesApi
     */
    getChat(target, page, size, cid, options) {
        return (0, exports.MessagesApiFp)(this.configuration).getChat(target, page, size, cid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 以发信者 ID 分组的最新消息列表
     * @summary 获取最新消息列表
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagesApi
     */
    getChatList(page, size, cid, options) {
        return (0, exports.MessagesApiFp)(this.configuration).getChatList(page, size, cid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 标记消息为已读
     * @param {Array<string>} requestBody
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagesApi
     */
    markRead(requestBody, cid, options) {
        return (0, exports.MessagesApiFp)(this.configuration).markRead(requestBody, cid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 如果提供了 channel 则发送给频道内所有人
     * @summary 创建并发送消息
     * @param {BasicMessage} basicMessage
     * @param {string} [channel]
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagesApi
     */
    sendMessage(basicMessage, channel, cid, options) {
        return (0, exports.MessagesApiFp)(this.configuration).sendMessage(basicMessage, channel, cid, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.MessagesApi = MessagesApi;
/**
 * NotificationsApi - axios parameter creator
 * @export
 */
const NotificationsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary 创建并发送通知
         * @param {BasicNotification} basicNotification
         * @param {'EMAIL'} [type]
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNotification: (basicNotification, type, cid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'basicNotification' is not null or undefined
            (0, common_1.assertParamExists)('createNotification', 'basicNotification', basicNotification);
            const localVarPath = `/v1/notifications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "auth", [], configuration);
            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }
            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(basicNotification, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary 根据 ID 删除通知记录
         * @param {string} id
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNotification: (id, cid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('deleteNotification', 'id', id);
            const localVarPath = `/v1/notifications/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "auth", [], configuration);
            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary 根据 ID 获取通知记录
         * @param {string} id
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotification: (id, cid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('getNotification', 'id', id);
            const localVarPath = `/v1/notifications/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "auth", [], configuration);
            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary 列出通知列表
         * @param {string} [templateId]
         * @param {string} [channelId]
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNotification: (templateId, channelId, page, size, cid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/notifications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "auth", [], configuration);
            if (templateId !== undefined) {
                localVarQueryParameter['templateId'] = templateId;
            }
            if (channelId !== undefined) {
                localVarQueryParameter['channelId'] = channelId;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }
            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.NotificationsApiAxiosParamCreator = NotificationsApiAxiosParamCreator;
/**
 * NotificationsApi - functional programming interface
 * @export
 */
const NotificationsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.NotificationsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary 创建并发送通知
         * @param {BasicNotification} basicNotification
         * @param {'EMAIL'} [type]
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNotification(basicNotification, type, cid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createNotification(basicNotification, type, cid, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary 根据 ID 删除通知记录
         * @param {string} id
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNotification(id, cid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteNotification(id, cid, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary 根据 ID 获取通知记录
         * @param {string} id
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotification(id, cid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getNotification(id, cid, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary 列出通知列表
         * @param {string} [templateId]
         * @param {string} [channelId]
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNotification(templateId, channelId, page, size, cid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listNotification(templateId, channelId, page, size, cid, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.NotificationsApiFp = NotificationsApiFp;
/**
 * NotificationsApi - factory interface
 * @export
 */
const NotificationsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.NotificationsApiFp)(configuration);
    return {
        /**
         *
         * @summary 创建并发送通知
         * @param {BasicNotification} basicNotification
         * @param {'EMAIL'} [type]
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNotification(basicNotification, type, cid, options) {
            return localVarFp.createNotification(basicNotification, type, cid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 根据 ID 删除通知记录
         * @param {string} id
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNotification(id, cid, options) {
            return localVarFp.deleteNotification(id, cid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 根据 ID 获取通知记录
         * @param {string} id
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotification(id, cid, options) {
            return localVarFp.getNotification(id, cid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 列出通知列表
         * @param {string} [templateId]
         * @param {string} [channelId]
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNotification(templateId, channelId, page, size, cid, options) {
            return localVarFp.listNotification(templateId, channelId, page, size, cid, options).then((request) => request(axios, basePath));
        },
    };
};
exports.NotificationsApiFactory = NotificationsApiFactory;
/**
 * NotificationsApi - object-oriented interface
 * @export
 * @class NotificationsApi
 * @extends {BaseAPI}
 */
class NotificationsApi extends base_1.BaseAPI {
    /**
     *
     * @summary 创建并发送通知
     * @param {BasicNotification} basicNotification
     * @param {'EMAIL'} [type]
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    createNotification(basicNotification, type, cid, options) {
        return (0, exports.NotificationsApiFp)(this.configuration).createNotification(basicNotification, type, cid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 根据 ID 删除通知记录
     * @param {string} id
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    deleteNotification(id, cid, options) {
        return (0, exports.NotificationsApiFp)(this.configuration).deleteNotification(id, cid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 根据 ID 获取通知记录
     * @param {string} id
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    getNotification(id, cid, options) {
        return (0, exports.NotificationsApiFp)(this.configuration).getNotification(id, cid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 列出通知列表
     * @param {string} [templateId]
     * @param {string} [channelId]
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    listNotification(templateId, channelId, page, size, cid, options) {
        return (0, exports.NotificationsApiFp)(this.configuration).listNotification(templateId, channelId, page, size, cid, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.NotificationsApi = NotificationsApi;
/**
 * TemplatesApi - axios parameter creator
 * @export
 */
const TemplatesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary 创建模板
         * @param {BasicNotificationTemplate} basicNotificationTemplate
         * @param {'EMAIL'} [type]
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTemplate: (basicNotificationTemplate, type, cid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'basicNotificationTemplate' is not null or undefined
            (0, common_1.assertParamExists)('createTemplate', 'basicNotificationTemplate', basicNotificationTemplate);
            const localVarPath = `/v1/templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "auth", [], configuration);
            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }
            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(basicNotificationTemplate, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary 根据 ID 删除模板
         * @param {string} id
         * @param {'EMAIL'} [type]
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTemplate: (id, type, cid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('deleteTemplate', 'id', id);
            const localVarPath = `/v1/templates/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "auth", [], configuration);
            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }
            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary 查找模板
         * @param {string} [key]
         * @param {number} [page]
         * @param {number} [size]
         * @param {'EMAIL'} [type]
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findTemplates: (key, page, size, type, cid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "auth", [], configuration);
            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }
            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }
            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary 根据 ID 获取模板
         * @param {string} id
         * @param {'EMAIL'} [type]
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTemplate: (id, type, cid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('getTemplate', 'id', id);
            const localVarPath = `/v1/templates/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "auth", [], configuration);
            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }
            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary 根据 ID 更新模板
         * @param {string} id
         * @param {BasicNotificationTemplate} basicNotificationTemplate
         * @param {'EMAIL'} [type]
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTemplate: (id, basicNotificationTemplate, type, cid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('updateTemplate', 'id', id);
            // verify required parameter 'basicNotificationTemplate' is not null or undefined
            (0, common_1.assertParamExists)('updateTemplate', 'basicNotificationTemplate', basicNotificationTemplate);
            const localVarPath = `/v1/templates/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "auth", [], configuration);
            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }
            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(basicNotificationTemplate, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.TemplatesApiAxiosParamCreator = TemplatesApiAxiosParamCreator;
/**
 * TemplatesApi - functional programming interface
 * @export
 */
const TemplatesApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.TemplatesApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary 创建模板
         * @param {BasicNotificationTemplate} basicNotificationTemplate
         * @param {'EMAIL'} [type]
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTemplate(basicNotificationTemplate, type, cid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createTemplate(basicNotificationTemplate, type, cid, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary 根据 ID 删除模板
         * @param {string} id
         * @param {'EMAIL'} [type]
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTemplate(id, type, cid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteTemplate(id, type, cid, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary 查找模板
         * @param {string} [key]
         * @param {number} [page]
         * @param {number} [size]
         * @param {'EMAIL'} [type]
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findTemplates(key, page, size, type, cid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.findTemplates(key, page, size, type, cid, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary 根据 ID 获取模板
         * @param {string} id
         * @param {'EMAIL'} [type]
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTemplate(id, type, cid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getTemplate(id, type, cid, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary 根据 ID 更新模板
         * @param {string} id
         * @param {BasicNotificationTemplate} basicNotificationTemplate
         * @param {'EMAIL'} [type]
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTemplate(id, basicNotificationTemplate, type, cid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateTemplate(id, basicNotificationTemplate, type, cid, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.TemplatesApiFp = TemplatesApiFp;
/**
 * TemplatesApi - factory interface
 * @export
 */
const TemplatesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.TemplatesApiFp)(configuration);
    return {
        /**
         *
         * @summary 创建模板
         * @param {BasicNotificationTemplate} basicNotificationTemplate
         * @param {'EMAIL'} [type]
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTemplate(basicNotificationTemplate, type, cid, options) {
            return localVarFp.createTemplate(basicNotificationTemplate, type, cid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 根据 ID 删除模板
         * @param {string} id
         * @param {'EMAIL'} [type]
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTemplate(id, type, cid, options) {
            return localVarFp.deleteTemplate(id, type, cid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 查找模板
         * @param {string} [key]
         * @param {number} [page]
         * @param {number} [size]
         * @param {'EMAIL'} [type]
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findTemplates(key, page, size, type, cid, options) {
            return localVarFp.findTemplates(key, page, size, type, cid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 根据 ID 获取模板
         * @param {string} id
         * @param {'EMAIL'} [type]
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTemplate(id, type, cid, options) {
            return localVarFp.getTemplate(id, type, cid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 根据 ID 更新模板
         * @param {string} id
         * @param {BasicNotificationTemplate} basicNotificationTemplate
         * @param {'EMAIL'} [type]
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTemplate(id, basicNotificationTemplate, type, cid, options) {
            return localVarFp.updateTemplate(id, basicNotificationTemplate, type, cid, options).then((request) => request(axios, basePath));
        },
    };
};
exports.TemplatesApiFactory = TemplatesApiFactory;
/**
 * TemplatesApi - object-oriented interface
 * @export
 * @class TemplatesApi
 * @extends {BaseAPI}
 */
class TemplatesApi extends base_1.BaseAPI {
    /**
     *
     * @summary 创建模板
     * @param {BasicNotificationTemplate} basicNotificationTemplate
     * @param {'EMAIL'} [type]
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplatesApi
     */
    createTemplate(basicNotificationTemplate, type, cid, options) {
        return (0, exports.TemplatesApiFp)(this.configuration).createTemplate(basicNotificationTemplate, type, cid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 根据 ID 删除模板
     * @param {string} id
     * @param {'EMAIL'} [type]
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplatesApi
     */
    deleteTemplate(id, type, cid, options) {
        return (0, exports.TemplatesApiFp)(this.configuration).deleteTemplate(id, type, cid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 查找模板
     * @param {string} [key]
     * @param {number} [page]
     * @param {number} [size]
     * @param {'EMAIL'} [type]
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplatesApi
     */
    findTemplates(key, page, size, type, cid, options) {
        return (0, exports.TemplatesApiFp)(this.configuration).findTemplates(key, page, size, type, cid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 根据 ID 获取模板
     * @param {string} id
     * @param {'EMAIL'} [type]
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplatesApi
     */
    getTemplate(id, type, cid, options) {
        return (0, exports.TemplatesApiFp)(this.configuration).getTemplate(id, type, cid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 根据 ID 更新模板
     * @param {string} id
     * @param {BasicNotificationTemplate} basicNotificationTemplate
     * @param {'EMAIL'} [type]
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplatesApi
     */
    updateTemplate(id, basicNotificationTemplate, type, cid, options) {
        return (0, exports.TemplatesApiFp)(this.configuration).updateTemplate(id, basicNotificationTemplate, type, cid, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.TemplatesApi = TemplatesApi;
