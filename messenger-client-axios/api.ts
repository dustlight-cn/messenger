/* tslint:disable */
/* eslint-disable */
/**
 * 消息推送服务
 * 提供消息推送、消息持久化、消息检索等存储服务。
 *
 * The version of the OpenAPI document: v1
 * Contact: hansin@goodvoice.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface BasicChannel
 */
export interface BasicChannel {
    /**
     * 
     * @type {string}
     * @memberof BasicChannel
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof BasicChannel
     */
    clientId?: string;
    /**
     * 
     * @type {string}
     * @memberof BasicChannel
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof BasicChannel
     */
    description?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof BasicChannel
     */
    owner?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof BasicChannel
     */
    members?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof BasicChannel
     */
    createdAt?: string;
    /**
     * 
     * @type {string}
     * @memberof BasicChannel
     */
    updatedAt?: string;
}
/**
 * 
 * @export
 * @interface BasicMessage
 */
export interface BasicMessage {
    /**
     * 
     * @type {string}
     * @memberof BasicMessage
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof BasicMessage
     */
    sender?: string;
    /**
     * 
     * @type {string}
     * @memberof BasicMessage
     */
    receiver?: string;
    /**
     * 
     * @type {string}
     * @memberof BasicMessage
     */
    clientId?: string;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof BasicMessage
     */
    content?: { [key: string]: object; };
    /**
     * 
     * @type {string}
     * @memberof BasicMessage
     */
    createdAt?: string;
    /**
     * 
     * @type {string}
     * @memberof BasicMessage
     */
    sentAt?: string;
    /**
     * 
     * @type {string}
     * @memberof BasicMessage
     */
    readAt?: string;
    /**
     * 
     * @type {number}
     * @memberof BasicMessage
     */
    status?: number;
}
/**
 * 
 * @export
 * @interface BasicNotification
 */
export interface BasicNotification {
    /**
     * 
     * @type {string}
     * @memberof BasicNotification
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof BasicNotification
     */
    templateId?: string;
    /**
     * 
     * @type {string}
     * @memberof BasicNotification
     */
    channelId?: string;
    /**
     * 
     * @type {string}
     * @memberof BasicNotification
     */
    sender?: string;
    /**
     * 
     * @type {string}
     * @memberof BasicNotification
     */
    clientId?: string;
    /**
     * 
     * @type {string}
     * @memberof BasicNotification
     */
    createdAt?: string;
    /**
     * 
     * @type {string}
     * @memberof BasicNotification
     */
    sentAt?: string;
    /**
     * 
     * @type {string}
     * @memberof BasicNotification
     */
    status?: string;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof BasicNotification
     */
    content?: { [key: string]: object; };
}
/**
 * 
 * @export
 * @interface BasicNotificationTemplate
 */
export interface BasicNotificationTemplate {
    /**
     * 
     * @type {string}
     * @memberof BasicNotificationTemplate
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof BasicNotificationTemplate
     */
    clientId?: string;
    /**
     * 
     * @type {string}
     * @memberof BasicNotificationTemplate
     */
    owner?: string;
    /**
     * 
     * @type {string}
     * @memberof BasicNotificationTemplate
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof BasicNotificationTemplate
     */
    content?: string;
    /**
     * 
     * @type {string}
     * @memberof BasicNotificationTemplate
     */
    status?: string;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof BasicNotificationTemplate
     */
    additional?: { [key: string]: object; };
}
/**
 * 
 * @export
 * @interface Channel
 */
export interface Channel {
    /**
     * 
     * @type {string}
     * @memberof Channel
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Channel
     */
    id?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Channel
     */
    members?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Channel
     */
    owner?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Channel
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof Channel
     */
    clientId?: string;
    /**
     * 
     * @type {string}
     * @memberof Channel
     */
    createdAt?: string;
    /**
     * 
     * @type {string}
     * @memberof Channel
     */
    updatedAt?: string;
}
/**
 * 
 * @export
 * @interface Message
 */
export interface Message {
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    id?: string;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof Message
     */
    content?: { [key: string]: object; };
    /**
     * 
     * @type {number}
     * @memberof Message
     */
    status?: number;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    clientId?: string;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    sender?: string;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    createdAt?: string;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    receiver?: string;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    sentAt?: string;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    readAt?: string;
}
/**
 * 
 * @export
 * @interface Notification
 */
export interface Notification {
    /**
     * 
     * @type {string}
     * @memberof Notification
     */
    id?: string;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof Notification
     */
    content?: { [key: string]: object; };
    /**
     * 
     * @type {string}
     * @memberof Notification
     */
    status?: string;
    /**
     * 
     * @type {string}
     * @memberof Notification
     */
    clientId?: string;
    /**
     * 
     * @type {string}
     * @memberof Notification
     */
    sender?: string;
    /**
     * 
     * @type {string}
     * @memberof Notification
     */
    createdAt?: string;
    /**
     * 
     * @type {string}
     * @memberof Notification
     */
    sentAt?: string;
    /**
     * 
     * @type {string}
     * @memberof Notification
     */
    channelId?: string;
    /**
     * 
     * @type {string}
     * @memberof Notification
     */
    templateId?: string;
}
/**
 * 
 * @export
 * @interface NotificationTemplate
 */
export interface NotificationTemplate {
    /**
     * 
     * @type {string}
     * @memberof NotificationTemplate
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationTemplate
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationTemplate
     */
    content?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationTemplate
     */
    owner?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationTemplate
     */
    status?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationTemplate
     */
    clientId?: string;
}
/**
 * 
 * @export
 * @interface QueryResultNotificationTemplate
 */
export interface QueryResultNotificationTemplate {
    /**
     * 
     * @type {number}
     * @memberof QueryResultNotificationTemplate
     */
    count?: number;
    /**
     * 
     * @type {Array<NotificationTemplate>}
     * @memberof QueryResultNotificationTemplate
     */
    data?: Array<NotificationTemplate>;
}

/**
 * ChannelsApi - axios parameter creator
 * @export
 */
export const ChannelsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {BasicChannel} basicChannel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChannel: async (basicChannel: BasicChannel, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'basicChannel' is not null or undefined
            assertParamExists('createChannel', 'basicChannel', basicChannel)
            const localVarPath = `/v1/channels`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(basicChannel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteChannel: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteChannel', 'id', id)
            const localVarPath = `/v1/channels/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannel: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getChannel', 'id', id)
            const localVarPath = `/v1/channels/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {BasicChannel} basicChannel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateChannel: async (id: string, basicChannel: BasicChannel, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateChannel', 'id', id)
            // verify required parameter 'basicChannel' is not null or undefined
            assertParamExists('updateChannel', 'basicChannel', basicChannel)
            const localVarPath = `/v1/channels/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(basicChannel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChannelsApi - functional programming interface
 * @export
 */
export const ChannelsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ChannelsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {BasicChannel} basicChannel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createChannel(basicChannel: BasicChannel, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Channel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createChannel(basicChannel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteChannel(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Channel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteChannel(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChannel(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Channel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getChannel(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {BasicChannel} basicChannel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateChannel(id: string, basicChannel: BasicChannel, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Channel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateChannel(id, basicChannel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ChannelsApi - factory interface
 * @export
 */
export const ChannelsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ChannelsApiFp(configuration)
    return {
        /**
         * 
         * @param {BasicChannel} basicChannel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChannel(basicChannel: BasicChannel, options?: any): AxiosPromise<Channel> {
            return localVarFp.createChannel(basicChannel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteChannel(id: string, options?: any): AxiosPromise<Channel> {
            return localVarFp.deleteChannel(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannel(id: string, options?: any): AxiosPromise<Channel> {
            return localVarFp.getChannel(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {BasicChannel} basicChannel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateChannel(id: string, basicChannel: BasicChannel, options?: any): AxiosPromise<Channel> {
            return localVarFp.updateChannel(id, basicChannel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ChannelsApi - object-oriented interface
 * @export
 * @class ChannelsApi
 * @extends {BaseAPI}
 */
export class ChannelsApi extends BaseAPI {
    /**
     * 
     * @param {BasicChannel} basicChannel 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelsApi
     */
    public createChannel(basicChannel: BasicChannel, options?: any) {
        return ChannelsApiFp(this.configuration).createChannel(basicChannel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelsApi
     */
    public deleteChannel(id: string, options?: any) {
        return ChannelsApiFp(this.configuration).deleteChannel(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelsApi
     */
    public getChannel(id: string, options?: any) {
        return ChannelsApiFp(this.configuration).getChannel(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {BasicChannel} basicChannel 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelsApi
     */
    public updateChannel(id: string, basicChannel: BasicChannel, options?: any) {
        return ChannelsApiFp(this.configuration).updateChannel(id, basicChannel, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MessagesApi - axios parameter creator
 * @export
 */
export const MessagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {BasicMessage} basicMessage 
         * @param {string} [channel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendMessage: async (basicMessage: BasicMessage, channel?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'basicMessage' is not null or undefined
            assertParamExists('sendMessage', 'basicMessage', basicMessage)
            const localVarPath = `/v1/messages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)

            if (channel !== undefined) {
                localVarQueryParameter['channel'] = channel;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(basicMessage, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MessagesApi - functional programming interface
 * @export
 */
export const MessagesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MessagesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {BasicMessage} basicMessage 
         * @param {string} [channel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendMessage(basicMessage: BasicMessage, channel?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Message>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendMessage(basicMessage, channel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MessagesApi - factory interface
 * @export
 */
export const MessagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MessagesApiFp(configuration)
    return {
        /**
         * 
         * @param {BasicMessage} basicMessage 
         * @param {string} [channel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendMessage(basicMessage: BasicMessage, channel?: string, options?: any): AxiosPromise<Array<Message>> {
            return localVarFp.sendMessage(basicMessage, channel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MessagesApi - object-oriented interface
 * @export
 * @class MessagesApi
 * @extends {BaseAPI}
 */
export class MessagesApi extends BaseAPI {
    /**
     * 
     * @param {BasicMessage} basicMessage 
     * @param {string} [channel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagesApi
     */
    public sendMessage(basicMessage: BasicMessage, channel?: string, options?: any) {
        return MessagesApiFp(this.configuration).sendMessage(basicMessage, channel, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * NotificationsApi - axios parameter creator
 * @export
 */
export const NotificationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {BasicNotification} basicNotification 
         * @param {'EMAIL'} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNotification: async (basicNotification: BasicNotification, type?: 'EMAIL', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'basicNotification' is not null or undefined
            assertParamExists('createNotification', 'basicNotification', basicNotification)
            const localVarPath = `/v1/notifications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(basicNotification, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotification: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getNotification', 'id', id)
            const localVarPath = `/v1/notifications/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NotificationsApi - functional programming interface
 * @export
 */
export const NotificationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NotificationsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {BasicNotification} basicNotification 
         * @param {'EMAIL'} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNotification(basicNotification: BasicNotification, type?: 'EMAIL', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNotification(basicNotification, type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNotification(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNotification(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NotificationsApi - factory interface
 * @export
 */
export const NotificationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NotificationsApiFp(configuration)
    return {
        /**
         * 
         * @param {BasicNotification} basicNotification 
         * @param {'EMAIL'} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNotification(basicNotification: BasicNotification, type?: 'EMAIL', options?: any): AxiosPromise<Notification> {
            return localVarFp.createNotification(basicNotification, type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotification(id: string, options?: any): AxiosPromise<Notification> {
            return localVarFp.getNotification(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NotificationsApi - object-oriented interface
 * @export
 * @class NotificationsApi
 * @extends {BaseAPI}
 */
export class NotificationsApi extends BaseAPI {
    /**
     * 
     * @param {BasicNotification} basicNotification 
     * @param {'EMAIL'} [type] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    public createNotification(basicNotification: BasicNotification, type?: 'EMAIL', options?: any) {
        return NotificationsApiFp(this.configuration).createNotification(basicNotification, type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    public getNotification(id: string, options?: any) {
        return NotificationsApiFp(this.configuration).getNotification(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TemplatesApi - axios parameter creator
 * @export
 */
export const TemplatesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {BasicNotificationTemplate} basicNotificationTemplate 
         * @param {'COMMON'} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTemplate: async (basicNotificationTemplate: BasicNotificationTemplate, type?: 'COMMON', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'basicNotificationTemplate' is not null or undefined
            assertParamExists('createTemplate', 'basicNotificationTemplate', basicNotificationTemplate)
            const localVarPath = `/v1/templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(basicNotificationTemplate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {'COMMON'} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTemplate: async (id: string, type?: 'COMMON', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTemplate', 'id', id)
            const localVarPath = `/v1/templates/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [key] 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {'COMMON'} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findTemplates: async (key?: string, page?: number, size?: number, type?: 'COMMON', options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {'COMMON'} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTemplate: async (id: string, type?: 'COMMON', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getTemplate', 'id', id)
            const localVarPath = `/v1/templates/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {BasicNotificationTemplate} basicNotificationTemplate 
         * @param {'COMMON'} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTemplate: async (id: string, basicNotificationTemplate: BasicNotificationTemplate, type?: 'COMMON', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateTemplate', 'id', id)
            // verify required parameter 'basicNotificationTemplate' is not null or undefined
            assertParamExists('updateTemplate', 'basicNotificationTemplate', basicNotificationTemplate)
            const localVarPath = `/v1/templates/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(basicNotificationTemplate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TemplatesApi - functional programming interface
 * @export
 */
export const TemplatesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TemplatesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {BasicNotificationTemplate} basicNotificationTemplate 
         * @param {'COMMON'} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTemplate(basicNotificationTemplate: BasicNotificationTemplate, type?: 'COMMON', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NotificationTemplate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTemplate(basicNotificationTemplate, type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {'COMMON'} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTemplate(id: string, type?: 'COMMON', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTemplate(id, type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [key] 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {'COMMON'} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findTemplates(key?: string, page?: number, size?: number, type?: 'COMMON', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryResultNotificationTemplate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findTemplates(key, page, size, type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {'COMMON'} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTemplate(id: string, type?: 'COMMON', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NotificationTemplate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTemplate(id, type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {BasicNotificationTemplate} basicNotificationTemplate 
         * @param {'COMMON'} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTemplate(id: string, basicNotificationTemplate: BasicNotificationTemplate, type?: 'COMMON', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTemplate(id, basicNotificationTemplate, type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TemplatesApi - factory interface
 * @export
 */
export const TemplatesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TemplatesApiFp(configuration)
    return {
        /**
         * 
         * @param {BasicNotificationTemplate} basicNotificationTemplate 
         * @param {'COMMON'} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTemplate(basicNotificationTemplate: BasicNotificationTemplate, type?: 'COMMON', options?: any): AxiosPromise<NotificationTemplate> {
            return localVarFp.createTemplate(basicNotificationTemplate, type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {'COMMON'} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTemplate(id: string, type?: 'COMMON', options?: any): AxiosPromise<void> {
            return localVarFp.deleteTemplate(id, type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [key] 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {'COMMON'} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findTemplates(key?: string, page?: number, size?: number, type?: 'COMMON', options?: any): AxiosPromise<QueryResultNotificationTemplate> {
            return localVarFp.findTemplates(key, page, size, type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {'COMMON'} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTemplate(id: string, type?: 'COMMON', options?: any): AxiosPromise<NotificationTemplate> {
            return localVarFp.getTemplate(id, type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {BasicNotificationTemplate} basicNotificationTemplate 
         * @param {'COMMON'} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTemplate(id: string, basicNotificationTemplate: BasicNotificationTemplate, type?: 'COMMON', options?: any): AxiosPromise<void> {
            return localVarFp.updateTemplate(id, basicNotificationTemplate, type, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TemplatesApi - object-oriented interface
 * @export
 * @class TemplatesApi
 * @extends {BaseAPI}
 */
export class TemplatesApi extends BaseAPI {
    /**
     * 
     * @param {BasicNotificationTemplate} basicNotificationTemplate 
     * @param {'COMMON'} [type] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplatesApi
     */
    public createTemplate(basicNotificationTemplate: BasicNotificationTemplate, type?: 'COMMON', options?: any) {
        return TemplatesApiFp(this.configuration).createTemplate(basicNotificationTemplate, type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {'COMMON'} [type] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplatesApi
     */
    public deleteTemplate(id: string, type?: 'COMMON', options?: any) {
        return TemplatesApiFp(this.configuration).deleteTemplate(id, type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [key] 
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {'COMMON'} [type] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplatesApi
     */
    public findTemplates(key?: string, page?: number, size?: number, type?: 'COMMON', options?: any) {
        return TemplatesApiFp(this.configuration).findTemplates(key, page, size, type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {'COMMON'} [type] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplatesApi
     */
    public getTemplate(id: string, type?: 'COMMON', options?: any) {
        return TemplatesApiFp(this.configuration).getTemplate(id, type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {BasicNotificationTemplate} basicNotificationTemplate 
     * @param {'COMMON'} [type] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplatesApi
     */
    public updateTemplate(id: string, basicNotificationTemplate: BasicNotificationTemplate, type?: 'COMMON', options?: any) {
        return TemplatesApiFp(this.configuration).updateTemplate(id, basicNotificationTemplate, type, options).then((request) => request(this.axios, this.basePath));
    }
}


