/**
 * 消息推送服务
 * 提供消息推送、消息持久化、消息检索等存储服务。
 *
 * The version of the OpenAPI document: v1
 * Contact: hansin@goodvoice.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from './configuration';
import { AxiosPromise, AxiosInstance } from 'axios';
import { RequestArgs, BaseAPI } from './base';
/**
 *
 * @export
 * @interface BasicChannel
 */
export interface BasicChannel {
    /**
     *
     * @type {string}
     * @memberof BasicChannel
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof BasicChannel
     */
    clientId?: string;
    /**
     *
     * @type {string}
     * @memberof BasicChannel
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof BasicChannel
     */
    description?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof BasicChannel
     */
    owner?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof BasicChannel
     */
    members?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof BasicChannel
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof BasicChannel
     */
    updatedAt?: string;
}
/**
 *
 * @export
 * @interface BasicMessage
 */
export interface BasicMessage {
    /**
     *
     * @type {string}
     * @memberof BasicMessage
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof BasicMessage
     */
    sender?: string;
    /**
     *
     * @type {string}
     * @memberof BasicMessage
     */
    receiver?: string;
    /**
     *
     * @type {string}
     * @memberof BasicMessage
     */
    clientId?: string;
    /**
     *
     * @type {{ [key: string]: object; }}
     * @memberof BasicMessage
     */
    content?: {
        [key: string]: object;
    };
    /**
     *
     * @type {string}
     * @memberof BasicMessage
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof BasicMessage
     */
    sentAt?: string;
    /**
     *
     * @type {string}
     * @memberof BasicMessage
     */
    readAt?: string;
    /**
     *
     * @type {number}
     * @memberof BasicMessage
     */
    status?: number;
}
/**
 *
 * @export
 * @interface BasicNotification
 */
export interface BasicNotification {
    /**
     *
     * @type {string}
     * @memberof BasicNotification
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof BasicNotification
     */
    templateId?: string;
    /**
     *
     * @type {string}
     * @memberof BasicNotification
     */
    channelId?: string;
    /**
     *
     * @type {string}
     * @memberof BasicNotification
     */
    sender?: string;
    /**
     *
     * @type {string}
     * @memberof BasicNotification
     */
    clientId?: string;
    /**
     *
     * @type {string}
     * @memberof BasicNotification
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof BasicNotification
     */
    sentAt?: string;
    /**
     *
     * @type {string}
     * @memberof BasicNotification
     */
    status?: string;
    /**
     *
     * @type {{ [key: string]: object; }}
     * @memberof BasicNotification
     */
    content?: {
        [key: string]: object;
    };
}
/**
 *
 * @export
 * @interface BasicNotificationTemplate
 */
export interface BasicNotificationTemplate {
    /**
     *
     * @type {string}
     * @memberof BasicNotificationTemplate
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof BasicNotificationTemplate
     */
    clientId?: string;
    /**
     *
     * @type {string}
     * @memberof BasicNotificationTemplate
     */
    owner?: string;
    /**
     *
     * @type {string}
     * @memberof BasicNotificationTemplate
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof BasicNotificationTemplate
     */
    content?: string;
    /**
     *
     * @type {string}
     * @memberof BasicNotificationTemplate
     */
    status?: string;
    /**
     *
     * @type {{ [key: string]: object; }}
     * @memberof BasicNotificationTemplate
     */
    additional?: {
        [key: string]: object;
    };
}
/**
 *
 * @export
 * @interface Channel
 */
export interface Channel {
    /**
     *
     * @type {string}
     * @memberof Channel
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof Channel
     */
    id?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof Channel
     */
    members?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof Channel
     */
    owner?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof Channel
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof Channel
     */
    clientId?: string;
    /**
     *
     * @type {string}
     * @memberof Channel
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof Channel
     */
    updatedAt?: string;
}
/**
 *
 * @export
 * @interface Message
 */
export interface Message {
    /**
     *
     * @type {string}
     * @memberof Message
     */
    id?: string;
    /**
     *
     * @type {{ [key: string]: object; }}
     * @memberof Message
     */
    content?: {
        [key: string]: object;
    };
    /**
     *
     * @type {number}
     * @memberof Message
     */
    status?: number;
    /**
     *
     * @type {string}
     * @memberof Message
     */
    clientId?: string;
    /**
     *
     * @type {string}
     * @memberof Message
     */
    sender?: string;
    /**
     *
     * @type {string}
     * @memberof Message
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof Message
     */
    receiver?: string;
    /**
     *
     * @type {string}
     * @memberof Message
     */
    sentAt?: string;
    /**
     *
     * @type {string}
     * @memberof Message
     */
    readAt?: string;
}
/**
 *
 * @export
 * @interface Notification
 */
export interface Notification {
    /**
     *
     * @type {string}
     * @memberof Notification
     */
    id?: string;
    /**
     *
     * @type {{ [key: string]: object; }}
     * @memberof Notification
     */
    content?: {
        [key: string]: object;
    };
    /**
     *
     * @type {string}
     * @memberof Notification
     */
    status?: string;
    /**
     *
     * @type {string}
     * @memberof Notification
     */
    clientId?: string;
    /**
     *
     * @type {string}
     * @memberof Notification
     */
    sender?: string;
    /**
     *
     * @type {string}
     * @memberof Notification
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof Notification
     */
    sentAt?: string;
    /**
     *
     * @type {string}
     * @memberof Notification
     */
    channelId?: string;
    /**
     *
     * @type {string}
     * @memberof Notification
     */
    templateId?: string;
}
/**
 *
 * @export
 * @interface NotificationTemplate
 */
export interface NotificationTemplate {
    /**
     *
     * @type {string}
     * @memberof NotificationTemplate
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof NotificationTemplate
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof NotificationTemplate
     */
    content?: string;
    /**
     *
     * @type {string}
     * @memberof NotificationTemplate
     */
    owner?: string;
    /**
     *
     * @type {string}
     * @memberof NotificationTemplate
     */
    status?: string;
    /**
     *
     * @type {string}
     * @memberof NotificationTemplate
     */
    clientId?: string;
}
/**
 *
 * @export
 * @interface QueryResultNotificationTemplate
 */
export interface QueryResultNotificationTemplate {
    /**
     *
     * @type {number}
     * @memberof QueryResultNotificationTemplate
     */
    count?: number;
    /**
     *
     * @type {Array<NotificationTemplate>}
     * @memberof QueryResultNotificationTemplate
     */
    data?: Array<NotificationTemplate>;
}
/**
 * ChannelsApi - axios parameter creator
 * @export
 */
export declare const ChannelsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {BasicChannel} basicChannel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createChannel: (basicChannel: BasicChannel, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteChannel: (id: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannel: (id: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} id
     * @param {BasicChannel} basicChannel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateChannel: (id: string, basicChannel: BasicChannel, options?: any) => Promise<RequestArgs>;
};
/**
 * ChannelsApi - functional programming interface
 * @export
 */
export declare const ChannelsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {BasicChannel} basicChannel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createChannel(basicChannel: BasicChannel, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Channel>>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteChannel(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Channel>>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannel(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Channel>>;
    /**
     *
     * @param {string} id
     * @param {BasicChannel} basicChannel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateChannel(id: string, basicChannel: BasicChannel, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Channel>>;
};
/**
 * ChannelsApi - factory interface
 * @export
 */
export declare const ChannelsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {BasicChannel} basicChannel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createChannel(basicChannel: BasicChannel, options?: any): AxiosPromise<Channel>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteChannel(id: string, options?: any): AxiosPromise<Channel>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannel(id: string, options?: any): AxiosPromise<Channel>;
    /**
     *
     * @param {string} id
     * @param {BasicChannel} basicChannel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateChannel(id: string, basicChannel: BasicChannel, options?: any): AxiosPromise<Channel>;
};
/**
 * ChannelsApi - object-oriented interface
 * @export
 * @class ChannelsApi
 * @extends {BaseAPI}
 */
export declare class ChannelsApi extends BaseAPI {
    /**
     *
     * @param {BasicChannel} basicChannel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelsApi
     */
    createChannel(basicChannel: BasicChannel, options?: any): Promise<import("axios").AxiosResponse<Channel>>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelsApi
     */
    deleteChannel(id: string, options?: any): Promise<import("axios").AxiosResponse<Channel>>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelsApi
     */
    getChannel(id: string, options?: any): Promise<import("axios").AxiosResponse<Channel>>;
    /**
     *
     * @param {string} id
     * @param {BasicChannel} basicChannel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelsApi
     */
    updateChannel(id: string, basicChannel: BasicChannel, options?: any): Promise<import("axios").AxiosResponse<Channel>>;
}
/**
 * MessagesApi - axios parameter creator
 * @export
 */
export declare const MessagesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {BasicMessage} basicMessage
     * @param {string} [channel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendMessage: (basicMessage: BasicMessage, channel?: string, options?: any) => Promise<RequestArgs>;
};
/**
 * MessagesApi - functional programming interface
 * @export
 */
export declare const MessagesApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {BasicMessage} basicMessage
     * @param {string} [channel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendMessage(basicMessage: BasicMessage, channel?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Message>>>;
};
/**
 * MessagesApi - factory interface
 * @export
 */
export declare const MessagesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {BasicMessage} basicMessage
     * @param {string} [channel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendMessage(basicMessage: BasicMessage, channel?: string, options?: any): AxiosPromise<Array<Message>>;
};
/**
 * MessagesApi - object-oriented interface
 * @export
 * @class MessagesApi
 * @extends {BaseAPI}
 */
export declare class MessagesApi extends BaseAPI {
    /**
     *
     * @param {BasicMessage} basicMessage
     * @param {string} [channel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagesApi
     */
    sendMessage(basicMessage: BasicMessage, channel?: string, options?: any): Promise<import("axios").AxiosResponse<Message[]>>;
}
/**
 * NotificationsApi - axios parameter creator
 * @export
 */
export declare const NotificationsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {BasicNotification} basicNotification
     * @param {'EMAIL'} [type]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createNotification: (basicNotification: BasicNotification, type?: 'EMAIL', options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNotification: (id: string, options?: any) => Promise<RequestArgs>;
};
/**
 * NotificationsApi - functional programming interface
 * @export
 */
export declare const NotificationsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {BasicNotification} basicNotification
     * @param {'EMAIL'} [type]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createNotification(basicNotification: BasicNotification, type?: 'EMAIL', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNotification(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>>;
};
/**
 * NotificationsApi - factory interface
 * @export
 */
export declare const NotificationsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {BasicNotification} basicNotification
     * @param {'EMAIL'} [type]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createNotification(basicNotification: BasicNotification, type?: 'EMAIL', options?: any): AxiosPromise<Notification>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNotification(id: string, options?: any): AxiosPromise<Notification>;
};
/**
 * NotificationsApi - object-oriented interface
 * @export
 * @class NotificationsApi
 * @extends {BaseAPI}
 */
export declare class NotificationsApi extends BaseAPI {
    /**
     *
     * @param {BasicNotification} basicNotification
     * @param {'EMAIL'} [type]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    createNotification(basicNotification: BasicNotification, type?: 'EMAIL', options?: any): Promise<import("axios").AxiosResponse<Notification>>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    getNotification(id: string, options?: any): Promise<import("axios").AxiosResponse<Notification>>;
}
/**
 * TemplatesApi - axios parameter creator
 * @export
 */
export declare const TemplatesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {BasicNotificationTemplate} basicNotificationTemplate
     * @param {'COMMON'} [type]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTemplate: (basicNotificationTemplate: BasicNotificationTemplate, type?: 'COMMON', options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} id
     * @param {'COMMON'} [type]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTemplate: (id: string, type?: 'COMMON', options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} [key]
     * @param {number} [page]
     * @param {number} [size]
     * @param {'COMMON'} [type]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findTemplates: (key?: string, page?: number, size?: number, type?: 'COMMON', options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} id
     * @param {'COMMON'} [type]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTemplate: (id: string, type?: 'COMMON', options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} id
     * @param {BasicNotificationTemplate} basicNotificationTemplate
     * @param {'COMMON'} [type]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTemplate: (id: string, basicNotificationTemplate: BasicNotificationTemplate, type?: 'COMMON', options?: any) => Promise<RequestArgs>;
};
/**
 * TemplatesApi - functional programming interface
 * @export
 */
export declare const TemplatesApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {BasicNotificationTemplate} basicNotificationTemplate
     * @param {'COMMON'} [type]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTemplate(basicNotificationTemplate: BasicNotificationTemplate, type?: 'COMMON', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NotificationTemplate>>;
    /**
     *
     * @param {string} id
     * @param {'COMMON'} [type]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTemplate(id: string, type?: 'COMMON', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @param {string} [key]
     * @param {number} [page]
     * @param {number} [size]
     * @param {'COMMON'} [type]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findTemplates(key?: string, page?: number, size?: number, type?: 'COMMON', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryResultNotificationTemplate>>;
    /**
     *
     * @param {string} id
     * @param {'COMMON'} [type]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTemplate(id: string, type?: 'COMMON', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NotificationTemplate>>;
    /**
     *
     * @param {string} id
     * @param {BasicNotificationTemplate} basicNotificationTemplate
     * @param {'COMMON'} [type]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTemplate(id: string, basicNotificationTemplate: BasicNotificationTemplate, type?: 'COMMON', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * TemplatesApi - factory interface
 * @export
 */
export declare const TemplatesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {BasicNotificationTemplate} basicNotificationTemplate
     * @param {'COMMON'} [type]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTemplate(basicNotificationTemplate: BasicNotificationTemplate, type?: 'COMMON', options?: any): AxiosPromise<NotificationTemplate>;
    /**
     *
     * @param {string} id
     * @param {'COMMON'} [type]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTemplate(id: string, type?: 'COMMON', options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} [key]
     * @param {number} [page]
     * @param {number} [size]
     * @param {'COMMON'} [type]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findTemplates(key?: string, page?: number, size?: number, type?: 'COMMON', options?: any): AxiosPromise<QueryResultNotificationTemplate>;
    /**
     *
     * @param {string} id
     * @param {'COMMON'} [type]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTemplate(id: string, type?: 'COMMON', options?: any): AxiosPromise<NotificationTemplate>;
    /**
     *
     * @param {string} id
     * @param {BasicNotificationTemplate} basicNotificationTemplate
     * @param {'COMMON'} [type]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTemplate(id: string, basicNotificationTemplate: BasicNotificationTemplate, type?: 'COMMON', options?: any): AxiosPromise<void>;
};
/**
 * TemplatesApi - object-oriented interface
 * @export
 * @class TemplatesApi
 * @extends {BaseAPI}
 */
export declare class TemplatesApi extends BaseAPI {
    /**
     *
     * @param {BasicNotificationTemplate} basicNotificationTemplate
     * @param {'COMMON'} [type]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplatesApi
     */
    createTemplate(basicNotificationTemplate: BasicNotificationTemplate, type?: 'COMMON', options?: any): Promise<import("axios").AxiosResponse<NotificationTemplate>>;
    /**
     *
     * @param {string} id
     * @param {'COMMON'} [type]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplatesApi
     */
    deleteTemplate(id: string, type?: 'COMMON', options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @param {string} [key]
     * @param {number} [page]
     * @param {number} [size]
     * @param {'COMMON'} [type]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplatesApi
     */
    findTemplates(key?: string, page?: number, size?: number, type?: 'COMMON', options?: any): Promise<import("axios").AxiosResponse<QueryResultNotificationTemplate>>;
    /**
     *
     * @param {string} id
     * @param {'COMMON'} [type]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplatesApi
     */
    getTemplate(id: string, type?: 'COMMON', options?: any): Promise<import("axios").AxiosResponse<NotificationTemplate>>;
    /**
     *
     * @param {string} id
     * @param {BasicNotificationTemplate} basicNotificationTemplate
     * @param {'COMMON'} [type]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplatesApi
     */
    updateTemplate(id: string, basicNotificationTemplate: BasicNotificationTemplate, type?: 'COMMON', options?: any): Promise<import("axios").AxiosResponse<void>>;
}
